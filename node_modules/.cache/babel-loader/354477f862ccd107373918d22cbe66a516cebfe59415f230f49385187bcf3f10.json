{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'ChatWidget',\n  data() {\n    return {\n      isOpen: false,\n      newMessage: '',\n      messages: []\n    };\n  },\n  methods: {\n    toggleChat() {\n      this.isOpen = !this.isOpen;\n      if (this.isOpen && this.messages.length === 0) {\n        setTimeout(() => {\n          this.messages.push({\n            text: 'Hello! How can I help you today?',\n            sender: 'agent',\n            time: this.getCurrentTime()\n          });\n        }, 1000);\n      }\n    },\n    sendMessage() {\n      if (this.newMessage.trim() === '') return;\n\n      // Add user message\n      this.messages.push({\n        text: this.newMessage,\n        sender: 'user',\n        time: this.getCurrentTime()\n      });\n      const userMessage = this.newMessage;\n      this.newMessage = '';\n\n      // Scroll to bottom\n      this.$nextTick(() => {\n        this.scrollToBottom();\n      });\n      setTimeout(() => {\n        this.simulateResponse(userMessage);\n      }, 1000 + Math.random() * 2000);\n    },\n    simulateResponse(userMessage) {\n      let response = \"Thank you for your message. Our team will get back to you soon.\";\n      if (userMessage.toLowerCase().includes('hello') || userMessage.toLowerCase().includes('hi')) {\n        response = \"Hello there! How can I assist you today?\";\n      } else if (userMessage.toLowerCase().includes('help')) {\n        response = \"I'd be happy to help. Could you please provide more details about what you need assistance with?\";\n      } else if (userMessage.toLowerCase().includes('time')) {\n        response = `The current time is ${this.getCurrentTime()}.`;\n      }\n      this.messages.push({\n        text: response,\n        sender: 'agent',\n        time: this.getCurrentTime()\n      });\n\n      // Scroll to bottom after adding new message\n      this.$nextTick(() => {\n        this.scrollToBottom();\n      });\n    },\n    getCurrentTime() {\n      const now = new Date();\n      return now.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n    scrollToBottom() {\n      if (this.$refs.messagesContainer) {\n        this.$refs.messagesContainer.scrollTop = this.$refs.messagesContainer.scrollHeight;\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","isOpen","newMessage","messages","methods","toggleChat","length","setTimeout","push","text","sender","time","getCurrentTime","sendMessage","trim","userMessage","$nextTick","scrollToBottom","simulateResponse","Math","random","response","toLowerCase","includes","now","Date","toLocaleTimeString","hour","minute","$refs","messagesContainer","scrollTop","scrollHeight"],"sources":["/Users/nhannguyen/Desktop/Duan/esmart-solutions-agency/src/components/Chat.vue"],"sourcesContent":["<template>\n  <div class=\"chat-container\" :class=\"{ 'chat-open': isOpen }\">\n    <!-- Chat button -->\n    <button \n      v-if=\"!isOpen\" \n      class=\"chat-button\" \n      @click=\"toggleChat\"\n      aria-label=\"Open chat\"\n    >\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <path d=\"M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z\"></path>\n        <circle cx=\"12\" cy=\"12\" r=\"1\"></circle>\n        <circle cx=\"16\" cy=\"12\" r=\"1\"></circle>\n        <circle cx=\"8\" cy=\"12\" r=\"1\"></circle>\n      </svg>\n    </button>\n\n    <div v-if=\"isOpen\" class=\"chat-window\">\n      <div class=\"chat-header\">\n        <div class=\"chat-header-info\">\n          <h2>Let's Chat!</h2>\n          <div class=\"chat-status\">\n            <span class=\"status-dot\"></span>\n            <span class=\"status-text\">We'll reply as soon as we can</span>\n          </div>\n        </div>\n        <button class=\"close-button\" @click=\"toggleChat\" aria-label=\"Close chat\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n          </svg>\n        </button>\n      </div>\n\n      <!-- Chat messages -->\n      <div class=\"chat-messages\" ref=\"messagesContainer\">\n        <div v-for=\"(message, index) in messages\" :key=\"index\" \n             :class=\"['message', message.sender === 'user' ? 'user-message' : 'agent-message']\">\n          <div class=\"message-content\">\n            {{ message.text }}\n          </div>\n          <div class=\"message-time\">{{ message.time }}</div>\n        </div>\n      </div>\n\n      <!-- Chat input -->\n      <div class=\"chat-input\">\n        <input \n          type=\"text\" \n          v-model=\"newMessage\" \n          placeholder=\"Write your message...\" \n          @keyup.enter=\"sendMessage\"\n        />\n        <div class=\"chat-controls\">\n          <button class=\"control-button emoji-button\" aria-label=\"Add emoji\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n              <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n              <path d=\"M8 14s1.5 2 4 2 4-2 4-2\"></path>\n              <line x1=\"9\" y1=\"9\" x2=\"9.01\" y2=\"9\"></line>\n              <line x1=\"15\" y1=\"9\" x2=\"15.01\" y2=\"9\"></line>\n            </svg>\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'ChatWidget',\n  data() {\n    return {\n      isOpen: false,\n      newMessage: '',\n      messages: []\n    }\n  },\n  methods: {\n    toggleChat() {\n      this.isOpen = !this.isOpen;\n      if (this.isOpen && this.messages.length === 0) {\n        setTimeout(() => {\n          this.messages.push({\n            text: 'Hello! How can I help you today?',\n            sender: 'agent',\n            time: this.getCurrentTime()\n          });\n        }, 1000);\n      }\n    },\n    sendMessage() {\n      if (this.newMessage.trim() === '') return;\n      \n      // Add user message\n      this.messages.push({\n        text: this.newMessage,\n        sender: 'user',\n        time: this.getCurrentTime()\n      });\n      \n      const userMessage = this.newMessage;\n      this.newMessage = '';\n      \n      // Scroll to bottom\n      this.$nextTick(() => {\n        this.scrollToBottom();\n      });\n\n      setTimeout(() => {\n        this.simulateResponse(userMessage);\n      }, 1000 + Math.random() * 2000);\n    },\n    simulateResponse(userMessage) {\n      let response = \"Thank you for your message. Our team will get back to you soon.\";\n      \n      if (userMessage.toLowerCase().includes('hello') || userMessage.toLowerCase().includes('hi')) {\n        response = \"Hello there! How can I assist you today?\";\n      } else if (userMessage.toLowerCase().includes('help')) {\n        response = \"I'd be happy to help. Could you please provide more details about what you need assistance with?\";\n      } else if (userMessage.toLowerCase().includes('time')) {\n        response = `The current time is ${this.getCurrentTime()}.`;\n      }\n      \n      this.messages.push({\n        text: response,\n        sender: 'agent',\n        time: this.getCurrentTime()\n      });\n      \n      // Scroll to bottom after adding new message\n      this.$nextTick(() => {\n        this.scrollToBottom();\n      });\n    },\n    getCurrentTime() {\n      const now = new Date();\n      return now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n    },\n    scrollToBottom() {\n      if (this.$refs.messagesContainer) {\n        this.$refs.messagesContainer.scrollTop = this.$refs.messagesContainer.scrollHeight;\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.chat-container {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  z-index: 1000;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n}\n\n.chat-button {\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n  background-color: #4285f4;\n  color: white;\n  border: none;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n  transition: all 0.3s ease;\n}\n\n.chat-button:hover {\n  background-color: #3367d6;\n  transform: scale(1.05);\n}\n\n.chat-button svg {\n  width: 28px;\n  height: 28px;\n}\n\n.chat-window {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  width: 350px;\n  height: 550px;\n  background-color: white;\n  border-radius: 12px;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  box-shadow: 0 5px 25px rgba(0, 0, 0, 0.2);\n  animation: slideIn 0.3s ease;\n}\n\n@keyframes slideIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.chat-header {\n  padding: 16px;\n  background-color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-bottom: 1px solid #f0f0f0;\n}\n\n.chat-header-info h2 {\n  margin: 0;\n  margin-right: auto;\n  align-self: flex-start;\n  font-size: 18px;\n  color: #333;\n  font-weight: 600;\n}\n\n.chat-status {\n  display: flex;\n  align-items: center;\n  margin-top: 4px;\n}\n\n.status-dot {\n  width: 8px;\n  height: 8px;\n  background-color: #4caf50;\n  border-radius: 50%;\n  margin-right: 6px;\n}\n\n.status-text {\n  font-size: 13px;\n  color: #666;\n}\n\n.close-button {\n  background: none;\n  justify-items: right;\n  border: none;\n  cursor: pointer;\n  color: #999;\n  margin-left: auto;\n  padding: 4px;\n}\n\n.close-button svg {\n  width: 18px;\n  height: 18px;\n}\n\n.close-button:hover {\n  color: #333;\n}\n\n.chat-messages {\n  flex: 1;\n  padding: 16px;\n  overflow-y: auto;\n  background-color: #f0f2f5;\n  display: flex;\n  flex-direction: column;\n}\n\n.message {\n  max-width: 80%;\n  margin-bottom: 12px;\n  display: flex;\n  flex-direction: column;\n}\n\n.user-message {\n  align-self: flex-end;\n}\n\n.agent-message {\n  align-self: flex-start;\n}\n\n.message-content {\n  padding: 10px 14px;\n  border-radius: 18px;\n  font-size: 14px;\n  line-height: 1.4;\n  word-wrap: break-word;\n}\n\n.user-message .message-content {\n  background-color: #4285f4;\n  color: white;\n  border-bottom-right-radius: 4px;\n}\n\n.agent-message .message-content {\n  background-color: white;\n  color: #333;\n  border-bottom-left-radius: 4px;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n}\n\n.message-time {\n  font-size: 11px;\n  color: #999;\n  margin-top: 4px;\n  align-self: flex-end;\n}\n\n.agent-message .message-time {\n  align-self: flex-start;\n}\n\n.chat-input {\n  padding: 12px 16px;\n  background-color: white;\n  display: flex;\n  align-items: center;\n  border-top: 1px solid #f0f0f0;\n}\n\n.chat-input input {\n  flex: 1;\n  border: none;\n  padding: 10px 0;\n  font-size: 14px;\n  outline: none;\n  color: #333;\n}\n\n.chat-input input::placeholder {\n  color: #aaa;\n}\n\n.chat-controls {\n  display: flex;\n  align-items: center;\n}\n\n.control-button {\n  background: none;\n  border: none;\n  cursor: pointer;\n  color: #666;\n  padding: 6px;\n  margin-left: 8px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: background-color 0.2s;\n}\n\n.control-button:hover {\n  background-color: #f0f0f0;\n}\n\n.control-button svg {\n  width: 20px;\n  height: 20px;\n}\n\n.send-button {\n  color: #4285f4;\n}\n\n.emoji-button {\n  color: #666;\n}\n\n/* Responsive adjustments */\n@media (max-width: 480px) {\n  .chat-window {\n    width: 100%;\n    height: 100%;\n    bottom: 0;\n    right: 0;\n    border-radius: 0;\n  }\n  \n  .chat-button {\n    bottom: 20px;\n    right: 20px;\n  }\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}